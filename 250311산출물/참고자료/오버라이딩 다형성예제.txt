
자바 오버라이딩을 통해 다형성 프로그래밍을 구현하는 방법은 무엇인가요


답변
자바에서 오버라이딩을 통해 다형성 프로그래밍을 구현하는 방법은 상속과 인터페이스를 활용하여 여러 클래스가 같은 메소드를 다양한 방식으로 구현하도록 하는 것입니다. 이를 통해 코드의 유연성과 확장성을 높일 수 있습니다.

상속을 통한 다형성 구현
java
// 부모 클래스
class Shape {
    public double area() {
        return 0;
    }
    
    public void draw() {
        System.out.println("도형을 그립니다.");
    }
}

// 자식 클래스들
class Circle extends Shape {
    private double radius;
    
    public Circle(double radius) {
        this.radius = radius;
    }
    
    @Override
    public double area() {
        return Math.PI * radius * radius;
    }
    
    @Override
    public void draw() {
        System.out.println("원을 그립니다.");
    }
}

class Rectangle extends Shape {
    private double width;
    private double height;
    
    public Rectangle(double width, double height) {
        this.width = width;
        this.height = height;
    }
    
    @Override
    public double area() {
        return width * height;
    }
    
    @Override
    public void draw() {
        System.out.println("사각형을 그립니다.");
    }
}

// 다형성 활용 예제
public class PolymorphismDemo {
    public static void main(String[] args) {
        // 부모 타입 참조변수로 자식 객체 참조
        Shape circle = new Circle(5.0);
        Shape rectangle = new Rectangle(4.0, 6.0);
        
        // 같은 메소드 호출이지만 다른 결과 출력
        System.out.println("원의 면적: " + circle.area());
        System.out.println("사각형의 면적: " + rectangle.area());
        
        circle.draw();
        rectangle.draw();
        
        // 여러 도형을 배열로 관리
        Shape[] shapes = new Shape[3];
        shapes[0] = new Circle(3.0);
        shapes[1] = new Rectangle(2.0, 5.0);
        shapes[2] = new Circle(7.0);
        
        // 반복문을 통한 다형성 활용
        for (Shape shape : shapes) {
            System.out.println("면적: " + shape.area());
            shape.draw();
        }
    }
}
인터페이스를 통한 다형성 구현
java
// 인터페이스 정의
interface Payable {
    double calculatePayment();
}

// 인터페이스 구현 클래스들
class Employee implements Payable {
    private String name;
    private double salary;
    
    public Employee(String name, double salary) {
        this.name = name;
        this.salary = salary;
    }
    
    @Override
    public double calculatePayment() {
        return salary;
    }
    
    public String getName() {
        return name;
    }
}

class Invoice implements Payable {
    private String partNumber;
    private int quantity;
    private double pricePerItem;
    
    public Invoice(String partNumber, int quantity, double pricePerItem) {
        this.partNumber = partNumber;
        this.quantity = quantity;
        this.pricePerItem = pricePerItem;
    }
    
    @Override
    public double calculatePayment() {
        return quantity * pricePerItem;
    }
    
    public String getPartNumber() {
        return partNumber;
    }
}

// 다형성 활용 예제
public class PaymentSystem {
    public static void main(String[] args) {
        // 인터페이스 타입 참조변수로 구현 객체 참조
        Payable[] payableItems = new Payable[4];
        payableItems[0] = new Employee("홍길동", 3000000);
        payableItems[1] = new Invoice("A-123", 2, 99.95);
        payableItems[2] = new Employee("김철수", 4000000);
        payableItems[3] = new Invoice("B-456", 5, 49.95);
        
        // 서로 다른 객체지만 동일한 인터페이스를 통해 처리
        System.out.println("지불 내역:");
        for (Payable item : payableItems) {
            System.out.println("지불액: " + item.calculatePayment() + "원");
        }
    }
}
다형성 프로그래밍의 장점
코드 재사용성 증가: 공통 기능은 부모 클래스나 인터페이스에 정의하고, 특수한 기능만 자식 클래스에서 오버라이딩합니다.

유지보수 용이성: 새로운 유형의 객체를 추가할 때 기존 코드를 수정하지 않고 새 클래스만 추가하면 됩니다.

확장성: 기존 시스템에 새로운 기능을 쉽게 추가할 수 있습니다.

코드 간결성: 다양한 객체를 동일한 방식으로 처리할 수 있어 코드가 간결해집니다.

다형성 프로그래밍을 효과적으로 구현하기 위해서는 적절한 추상화 수준을 결정하고, 공통 기능을 부모 클래스나 인터페이스에 정의한 후, 각 자식 클래스에서 필요에 따라 메소드를 오버라이딩하는 것이 중요합니다.